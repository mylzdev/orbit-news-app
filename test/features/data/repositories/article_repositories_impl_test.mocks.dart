// Mocks generated by Mockito 5.4.4 from annotations
// in news_app/test/features/data/repositories/article_repositories_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app/app/core/errors/failure.dart' as _i8;
import 'package:news_app/app/core/network/network_info.dart' as _i9;
import 'package:news_app/app/features/article/data/api/api.dart' as _i2;
import 'package:news_app/app/features/article/data/datasources/local/article_local_datasource.dart'
    as _i4;
import 'package:news_app/app/features/article/data/datasources/remote/article_remote_datasource.dart'
    as _i7;
import 'package:news_app/app/features/article/data/models/article_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestClient_0 extends _i1.SmartFake implements _i2.RestClient {
  _FakeRestClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArticleLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleLocalDatasource extends _i1.Mock
    implements _i4.ArticleLocalDatasource {
  @override
  _i5.Future<bool> initDb() => (super.noSuchMethod(
        Invocation.method(
          #initDb,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteDb() => (super.noSuchMethod(
        Invocation.method(
          #deleteDb,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> insertArticles(List<_i6.ArticleModel>? articles) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertArticles,
          [articles],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteAllArticles() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllArticles,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i6.ArticleModel>> getArticles() => (super.noSuchMethod(
        Invocation.method(
          #getArticles,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.ArticleModel>>.value(<_i6.ArticleModel>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.ArticleModel>>.value(<_i6.ArticleModel>[]),
      ) as _i5.Future<List<_i6.ArticleModel>>);
}

/// A class which mocks [ArticleRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticleRemoteDatasource extends _i1.Mock
    implements _i7.ArticleRemoteDatasource {
  @override
  _i2.RestClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeRestClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeRestClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.RestClient);

  @override
  _i5.Future<_i3.Either<_i8.Failure, List<_i6.ArticleModel>>> getArticles(
          _i2.ArticleCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticles,
          [category],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i8.Failure, List<_i6.ArticleModel>>>.value(
                _FakeEither_1<_i8.Failure, List<_i6.ArticleModel>>(
          this,
          Invocation.method(
            #getArticles,
            [category],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i8.Failure, List<_i6.ArticleModel>>>.value(
                _FakeEither_1<_i8.Failure, List<_i6.ArticleModel>>(
          this,
          Invocation.method(
            #getArticles,
            [category],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, List<_i6.ArticleModel>>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<_i10.InternetConnectionStatus> get internetConnectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#internetConnectionStatus),
        returnValue: _i5.Stream<_i10.InternetConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i10.InternetConnectionStatus>.empty(),
      ) as _i5.Stream<_i10.InternetConnectionStatus>);
}
